#!/bin/sh

# Define where your age private key for sops is stored - ensure this is SECURELY handled
export SOPS_AGE_KEY_FILE="${PWD}/.sops/age/private.key"

# Check if the age key file exists and is readable
if [ ! -f "$SOPS_AGE_KEY_FILE" ]; then
  echo "Age secret key file not found: $SOPS_AGE_KEY_FILE"
  exit 1
fi

# Define patterns for encrypted files to decrypt
ENCRYPTED_PATTERNS=("*.enc.yaml" "*.enc.env", "*.enc.auto.tfvars")

strip_hash_comment() {
  local file=$1
  # Remove the hash comment line (assuming it's the last line)
  sed -i '/^# Hash:/d' "$file"
}

# Decrypt the files after checkout
for pattern in "${ENCRYPTED_PATTERNS[@]}"; do
  for file in $(find . -type f -name "$pattern"); do
    # Determine the decrypted file name based on the pattern
    if [[ "$file" == *.enc.yaml ]]; then
      DECRYPTED_FILE_NAME="${file%.enc.yaml}.yaml"
    elif [[ "$file" == *.enc.env ]]; then
      DECRYPTED_FILE_NAME="${file%.enc.env}.env"
    elif [[ "$file" == *.enc.auto.tfvars ]]; then
      DECRYPTED_FILE_NAME="${file%.enc.env}.auto.tfvars"
    else
      echo "Unsupported file type: $file"
      continue
    fi

    # Check if the encrypted file exists; if so, proceed to decrypt it
    if [ -f "$file" ]; then
      echo "Decrypting $file to $DECRYPTED_FILE_NAME"
      sops --decrypt "$file" --age > "$DECRYPTED_FILE_NAME" 2>/dev/null
      if [ $? -eq 0 ]; then
        strip_hash_comment "$DECRYPTED_FILE_NAME"
      else
        echo "Failed to decrypt $file"
        rm -f "$DECRYPTED_FILE_NAME"  # Remove potentially partial output
      fi
    fi
  done
done

exit 0